script(language='JavaScript' type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/holder/2.8.1/holder.min.js')

style.
  [draggable] {
    -moz-user-select: none;
    -khtml-user-select: none;
    -webkit-user-select: none;
    user-select: none;
    /* Required to make elements draggable in old WebKit */
    -khtml-user-drag: element;
    -webkit-user-drag: element;
    cursor: move;
  }
  
  .over {
    border: 2px dashed #000;
  }
  
  .column {
    width: 32px;
    height: 32px;
  }
  
  .holderjs {
    width: 32px;
    height: 32px;
  }
  
div(id='columns')
  .column(draggable = 'true')
    .holderjs(data-background-src="?holder.js/32x32?text=A")
  .column(draggable = 'true')
    .holderjs(data-background-src="?holder.js/32x32?text=B")
  .column(draggable = 'true')
    .holderjs(data-background-src="?holder.js/32x32?text=C")

script.
  var dragSrcEl = null;
  
  function handleDragStart(e) {
    // Target (this) element is the source node.
    this.style.opacity = '0.4';
    
    dragSrcEl = this;
    
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', this.innerHTML);
  }
  
  function handleDragOver(e) {
    if (e.preventDefault) {
      e.preventDefault(); // Necessary. Allows us to drop.
    }
    
    e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.
    
    return false;
  }
  
  function handleDragEnter(e) {
    // this / e.target is the current hover target.
    this.classList.add('over');
  }
  
  function handleDragLeave(e) {
    this.classList.remove('over');  // this / e.target is previous target element.
  }
  
  function handleDrop(e) {
    // this/e.target is current target element.
    
    if (e.stopPropagation) {
      e.stopPropagation(); // Stops some browsers from redirecting.
    }
    
    // Don't do anything if dropping the same column we're dragging.
    if (dragSrcEl != this) {
      // Set the source column's HTML to the HTML of the columnwe dropped on.
      dragSrcEl.innerHTML = this.innerHTML;
      this.innerHTML = e.dataTransfer.getData('text/html');
    }
    
    return false;
  }
  
  function handleDragEnd(e) {
    // this/e.target is the source node.
    this.style.opacity = '1.0';
    
    [].forEach.call(cols, function (col) {
      col.classList.remove('over');
    });
  }
  
  var cols = document.querySelectorAll('#columns .column');
  [].forEach.call(cols, function(col) {
    col.addEventListener('dragstart', handleDragStart, false);
    col.addEventListener('dragenter', handleDragEnter, false)
    col.addEventListener('dragover', handleDragOver, false);
    col.addEventListener('dragleave', handleDragLeave, false);
    col.addEventListener('drop', handleDrop, false);
    col.addEventListener('dragend', handleDragEnd, false);
  });
  
